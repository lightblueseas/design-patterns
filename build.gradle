
buildscript {
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "com.github.ben-manes:gradle-versions-plugin:$gradlePluginVersionsVersion"
        classpath "gradle.plugin.com.hierynomus.gradle.plugins:license-gradle-plugin:$licenseGradlePluginVersion"
        classpath "org.ajoberstar.grgit:grgit-gradle:$grgitGradlePluginVersion"
        classpath "com.diffplug.spotless:spotless-plugin-gradle:$spotlessGradlePluginVersion"
    }
}

apply plugin: "org.ajoberstar.grgit"

task tagRelease {
    description = 'Tags the current head with the project\'s version.'
    doLast {
        grgit.tag.add {
            name = "RELEASE-${project.version.toString()}"
            message = "Release of ${version}"
        }
    }
}

allprojects {
    group = "$groupPackage" as Object
    version = "$projectVersion" as Object
}

subprojects {
    apply plugin: "java"
    apply plugin: "maven-publish"
    apply plugin: "signing"
    apply plugin: "com.github.ben-manes.versions"
    apply plugin: "com.github.hierynomus.license"
    apply plugin: "jacoco"
    apply plugin: "com.diffplug.spotless"

    spotless {

        format "misc", {
            // define the files to apply `misc` to
            target "*.gradle", "*.md", ".gitignore"

            // define the steps to apply to those files
            trimTrailingWhitespace()
            indentWithSpaces() // or spaces. Takes an integer argument if you don"t like 4
            endWithNewline()
        }
        java {
            eclipse("4.19.0").configFile("../src/main/resources/alpharo-formatter.xml")
        }
    }

    repositories {
        mavenLocal()
        mavenCentral()
    }

    dependencies {
        compileOnly("org.projectlombok:lombok:$lombokVersion")
        annotationProcessor("org.projectlombok:lombok:$lombokVersion")
        testCompileOnly("org.projectlombok:lombok:$lombokVersion")
        testAnnotationProcessor("org.projectlombok:lombok:$lombokVersion")
        testImplementation("org.testng:testng:$testngVersion")
        testImplementation("org.meanbean:meanbean:$meanbeanVersion")
    }

    // workhack for license issue #76
    gradle.startParameter.excludedTaskNames += "licenseMain"
    gradle.startParameter.excludedTaskNames += "licenseTest"

    sourceCompatibility = "$projectSourceCompatibility"

    javadoc {
        if(JavaVersion.current().isJava9Compatible()) {
            options.addBooleanOption("html5", true)
        }
    }

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
    }

    test {
        useTestNG()
    }

    jacocoTestReport {
        reports {
            xml.required.set(true)
            html.required.set(true)
        }
    }

    check.dependsOn jacocoTestReport

}
